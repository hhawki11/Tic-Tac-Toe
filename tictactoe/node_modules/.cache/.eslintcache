[{"/Users/hunterhawkins/Desktop/tictactoe/src/index.js":"1","/Users/hunterhawkins/Desktop/tictactoe/src/App.js":"2","/Users/hunterhawkins/Desktop/tictactoe/src/reportWebVitals.js":"3","/Users/hunterhawkins/Desktop/tictactoe/src/components/Game.js":"4","/Users/hunterhawkins/Desktop/tictactoe/src/components/Board.js":"5","/Users/hunterhawkins/Desktop/tictactoe/src/components/Square.js":"6"},{"size":500,"mtime":1621440808950,"results":"7","hashOfConfig":"8"},{"size":193,"mtime":1621442344021,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1621440808951,"results":"10","hashOfConfig":"8"},{"size":3906,"mtime":1622739322569,"results":"11","hashOfConfig":"8"},{"size":811,"mtime":1621542182926,"results":"12","hashOfConfig":"8"},{"size":204,"mtime":1621526150792,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"ol6jb5",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"/Users/hunterhawkins/Desktop/tictactoe/src/index.js",[],["30","31"],"/Users/hunterhawkins/Desktop/tictactoe/src/App.js",[],"/Users/hunterhawkins/Desktop/tictactoe/src/reportWebVitals.js",[],"/Users/hunterhawkins/Desktop/tictactoe/src/components/Game.js",["32"],"import React, { useState } from 'react';\nimport Board from './Board';\nimport axios from \"axios\";\n\nfunction Game() {\n    const [history, setHistory] = useState([{squares: Array(9).fill(null)}]);\n    const [xNext, setXNext] = useState(true);\n    const [stepNum, setStepNum] = useState(0);\n    const [winners, setWinners] = useState([]);\n    const [gameDone, setGameDone] = useState(false);\n\n    const newHistory = history;\n    const current = newHistory[stepNum];\n    const winner = calculateWinner(current.squares);\n\n    window.addEventListener('load', function() {\n      refreshList();\n    });\n\n    function handleWinners(obj) {\n      setWinners(obj);\n    }\n\n    function refreshList() {\n      axios\n        .get(\"/api/todos/\")\n        .then((res) => handleWinners(res.data));\n    };\n\n    const winnerList = winners.map((curr) => {\n      if (curr.id % 2 === 0) {\n        return (\n          <tr>\n            <td className=\"datum\">{curr.id / 2}</td>\n            <td className=\"datum\">{curr.title}</td>\n          </tr>\n        );\n      }\n    });\n\n    const moves = history.map((step, move) => {\n        const desc = move ?\n          'Move #' + move :\n          'Game Start';\n        return (\n          <p >\n            <div className=\"white\">\n            <button onClick={() => jumpTo(move)}>{desc}</button>\n            </div>\n          </p>\n        );\n    });\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next Player: ' + (xNext ? 'X' : 'O');\n    }\n\n    function handleClick(i) {\n        const newHistory = history.slice(0, stepNum + 1);\n        const current = newHistory[newHistory.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n          return;\n        }\n        squares[i] = xNext ? 'X' : 'O';\n        setHistory(history.concat([{ squares: squares }]));\n        setStepNum(history.length);\n        setXNext(!xNext);\n    }\n\n    function jumpTo(step) {\n        setStepNum(step);\n        setXNext((step % 2) === 0);\n        setHistory(history.slice(0, step + 1));\n    }\n\n    function restartBoard() {\n      jumpTo(0);\n      setGameDone(false);\n      setHistory(history.slice(0, 1));\n    }\n\n    return (\n      <div className=\"app-face\">\n        <div className=\"game\">\n          <div className=\"center\">\n          <div className=\"game-list\">\n            <table classNamme=\"game-table\">\n              <tr >\n                <th className=\"datum\">Game</th>\n                <th className=\"datum\">Winner</th>\n              </tr>\n              { winnerList }\n            </table>\n          </div>\n          <div className=\"game-board\">\n            <div className=\"game-header\">{ status }</div>\n            <Board\n              squares={current.squares}\n              onClick={(i) => handleClick(i)}\n            />\n            <button className=\"game-footer\" onClick={() => restartBoard()}>New Game</button>\n          </div>\n          <div className=\"game-info\">\n              Moves\n              { moves }\n          </div>    \n          </div>    \n        </div>\n        </div>\n  );\n\n  function calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        if (!gameDone) {\n          setGameDone(true);\n          addWinner(squares[a]);\n          \n        }\n        return squares[a];\n      }\n    }\n    return null;\n  }\n\n  function addWinner(name) {\n    const testPost = { 'title': name, 'description': 'test desc', 'completed': false };\n      axios\n      .post(\"/api/todos/\", testPost)\n      .then((res) => refreshList())\n      .catch((err) => console.log(err));\n  }\n  \n}\n\nexport default Game;","/Users/hunterhawkins/Desktop/tictactoe/src/components/Board.js",["33"],"import React, { useState } from 'react';\nimport Square from './Square';\n\nfunction Board(props) {\n    function renderSquare(i) {\n        return (\n            <Square \n                num = {props.squares[i]}\n                onClick = {() => props.onClick(i)}\n            />\n        );\n    }\n\n    return (\n      <div>\n          <div className=\"board-row\">\n              {renderSquare(0)}\n              {renderSquare(1)}\n              {renderSquare(2)}\n          </div>\n          <div className=\"board-row\">\n              {renderSquare(3)}\n              {renderSquare(4)}\n              {renderSquare(5)}\n          </div>\n          <div className=\"board-row\">\n              {renderSquare(6)}\n              {renderSquare(7)}\n              {renderSquare(8)}\n          </div>\n      </div>\n  );\n}\n\nexport default Board;","/Users/hunterhawkins/Desktop/tictactoe/src/components/Square.js",["34"],"import React, { useState } from 'react';\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={() => props.onClick()}>\n      {props.num}\n    </button>\n  );\n}\n\nexport default Square;",{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":30,"column":43,"nodeType":"41","messageId":"42","endLine":30,"endColumn":45},{"ruleId":"43","severity":1,"message":"44","line":1,"column":17,"nodeType":"45","messageId":"46","endLine":1,"endColumn":25},{"ruleId":"43","severity":1,"message":"44","line":1,"column":17,"nodeType":"45","messageId":"46","endLine":1,"endColumn":25},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]