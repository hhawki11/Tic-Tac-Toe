{"ast":null,"code":"var _jsxFileName = \"/Users/hunterhawkins/Desktop/tictactoe/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Board from './Board';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game() {\n  _s();\n\n  const [history, setHistory] = useState([{\n    squares: Array(9).fill(null)\n  }]);\n  const [xNext, setXNext] = useState(true);\n  const [stepNum, setStepNum] = useState(0);\n  const [winners, setWinners] = useState([]);\n  const [gameDone, setGameDone] = useState(false);\n  const newHistory = history;\n  const current = newHistory[stepNum]; //const current = newHistory[newHistory.length - 1];\n\n  const winner = calculateWinner(current.squares); //refreshList(); \n  //console.log(winners);\n\n  window.addEventListener('load', function () {\n    refreshList();\n  });\n\n  function handleWinners(obj) {\n    setWinners(obj);\n    console.log(winners);\n  }\n\n  function refreshList() {\n    axios.get(\"/api/todos/\").then(res => handleWinners(res.data));\n  }\n\n  ;\n  const winnerList = winners.map(curr => {\n    if (curr.id % 2 === 0) {\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: curr.id / 2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: curr.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this);\n    }\n  });\n  const moves = history.map((step, move) => {\n    const desc = move ? 'Go to move #' + move : 'Go to game start';\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"game-info\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => jumpTo(move),\n        children: desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }, this); // return (\n    //   <li key={move}>\n    //     <button onClick={() => jumpTo(move)}>{desc}</button>\n    //   </li>\n    // );\n  });\n  let status;\n\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xNext ? 'X' : 'O');\n  }\n\n  function handleClick(i) {\n    const newHistory = history.slice(0, stepNum + 1);\n    const current = newHistory[newHistory.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      //if (gameDone || squares[i]) {\n      return;\n    }\n\n    squares[i] = xNext ? 'X' : 'O';\n    setHistory(history.concat([{\n      squares: squares\n    }]));\n    setStepNum(history.length);\n    setXNext(!xNext);\n  }\n\n  function jumpTo(step) {\n    setStepNum(step);\n    setXNext(step % 2 === 0);\n    console.log(\"Jump to step \" + step);\n    console.log(\"New history is: \" + history.slice(0, step));\n    setHistory(history.slice(0, step + 1));\n    console.log(history);\n  }\n\n  function restartBoard() {\n    jumpTo(0);\n    setGameDone(false);\n    setHistory(history.slice(0, 1));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-list\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        classNamme: \"game-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Winner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }, this), winnerList]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => restartBoard(),\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        squares: current.squares,\n        onClick: i => handleClick(i)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: moves\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n\n  function calculateWinner(squares) {\n    const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        if (!gameDone) {\n          setGameDone(true);\n          addWinner(squares[a]);\n        } //setWinners([...winners], [])\n\n\n        return squares[a];\n      }\n    }\n\n    return null;\n  }\n\n  function addWinner(name) {\n    const testPost = {\n      'title': name,\n      'description': 'test desc',\n      'completed': false\n    };\n    axios.post(\"/api/todos/\", testPost).then(res => refreshList()).catch(err => console.log(err));\n  }\n}\n\n_s(Game, \"mqOUSaxp7R/8MVpSCF3peCk0QWk=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/hunterhawkins/Desktop/tictactoe/src/components/Game.js"],"names":["React","useState","Board","axios","Game","history","setHistory","squares","Array","fill","xNext","setXNext","stepNum","setStepNum","winners","setWinners","gameDone","setGameDone","newHistory","current","winner","calculateWinner","window","addEventListener","refreshList","handleWinners","obj","console","log","get","then","res","data","winnerList","map","curr","id","title","moves","step","move","desc","jumpTo","status","handleClick","i","slice","length","concat","restartBoard","lines","a","b","c","addWinner","name","testPost","post","catch","err"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Board from './Board';\nimport axios from \"axios\";\n\nfunction Game() {\n    const [history, setHistory] = useState([{squares: Array(9).fill(null)}]);\n    const [xNext, setXNext] = useState(true);\n    const [stepNum, setStepNum] = useState(0);\n    const [winners, setWinners] = useState([]);\n    const [gameDone, setGameDone] = useState(false);\n\n    const newHistory = history;\n    const current = newHistory[stepNum];\n    //const current = newHistory[newHistory.length - 1];\n    const winner = calculateWinner(current.squares);\n    \n    \n    //refreshList(); \n    //console.log(winners);\n\n    window.addEventListener('load', function() {\n      \n      refreshList();\n    });\n\n    function handleWinners(obj) {\n      setWinners(obj);\n      console.log(winners);\n    }\n\n    function refreshList() {\n      axios\n        .get(\"/api/todos/\")\n        .then((res) => handleWinners(res.data));\n    };\n\n    const winnerList = winners.map((curr) => {\n      if (curr.id % 2 === 0) {\n        return (\n          <tr>\n            <td>{curr.id / 2}</td>\n            <td>{curr.title}</td>\n          </tr>\n        );\n      }\n    });\n\n    const moves = history.map((step, move) => {\n        const desc = move ?\n          'Go to move #' + move :\n          'Go to game start';\n        return (\n          <p className=\"game-info\">\n            <button onClick={() => jumpTo(move)}>{desc}</button>\n          </p>\n        );\n        // return (\n          \n        //   <li key={move}>\n        //     <button onClick={() => jumpTo(move)}>{desc}</button>\n        //   </li>\n        // );\n        \n    });\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (xNext ? 'X' : 'O');\n    }\n\n    function handleClick(i) {\n        \n        const newHistory = history.slice(0, stepNum + 1);\n        const current = newHistory[newHistory.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n        //if (gameDone || squares[i]) {\n          return;\n        }\n        squares[i] = xNext ? 'X' : 'O';\n        setHistory(history.concat([{ squares: squares }]));\n        setStepNum(history.length);\n        setXNext(!xNext);\n    }\n\n    function jumpTo(step) {\n        setStepNum(step);\n        setXNext((step % 2) === 0);\n        console.log(\"Jump to step \" + step);\n        console.log(\"New history is: \" + history.slice(0,step));\n        setHistory(history.slice(0, step + 1));\n        console.log(history);\n    }\n\n    function restartBoard() {\n      jumpTo(0);\n      setGameDone(false);\n      setHistory(history.slice(0, 1));\n    }\n\n    return (\n        <div className=\"game\">\n          <div className=\"game-list\">\n            <table classNamme=\"game-table\">\n              <tr >\n                <th>Game</th>\n                <th>Winner</th>\n              </tr>\n              { winnerList }\n            </table>\n          </div>\n          <div className=\"game-board\">\n            <button onClick={() => restartBoard()}>New Game</button>\n            <Board \n              squares={current.squares}\n              onClick={(i) => handleClick(i)}\n            />\n            <div>{ status }</div>\n          </div>\n          <div className=\"game-info\">\n              { moves }\n          </div>        \n        </div>\n  );\n\n  function calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        if (!gameDone) {\n          setGameDone(true);\n          addWinner(squares[a]);\n          \n        }\n          //setWinners([...winners], [])\n        return squares[a];\n      }\n    }\n    return null;\n  }\n\n  function addWinner(name) {\n    const testPost = { 'title': name, 'description': 'test desc', 'completed': false };\n      axios\n      .post(\"/api/todos/\", testPost)\n      .then((res) => refreshList())\n      .catch((err) => console.log(err));\n  }\n  \n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}