{"ast":null,"code":"var _jsxFileName = \"/Users/hunterhawkins/Desktop/tictactoe/src/components/Board.js\";\nimport React, { useState } from 'react';\nimport Square from './Square';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board(props) {\n  /*const [squares, setSquares] = useState(Array(9).fill(null));\n  const [xNext, setXNext] = useState(true);\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xNext ? 'X' : 'O');\n  }\n   function handleClick(i) {\n      const newSquares = squares.slice();\n      if (calculateWinner(newSquares) || newSquares[i]) {\n          return;\n      }\n      newSquares[i] = xNext ? 'X' : 'O';\n      setSquares(newSquares);\n      setXNext(!xNext);\n  }\n   function calculateWinner(squares) {\n      const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n      ];\n      for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n          return squares[a];\n        }\n      }\n      return null;\n  }\n  */\n  function renderSquare(i) {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      num: props.squares[i],\n      onClick: () => props.onClick(i)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [renderSquare(0), renderSquare(1), renderSquare(2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [renderSquare(3), renderSquare(4), renderSquare(5)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [renderSquare(6), renderSquare(7), renderSquare(8)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/hunterhawkins/Desktop/tictactoe/src/components/Board.js"],"names":["React","useState","Square","Board","props","renderSquare","i","squares","onClick"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAClB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGI,WAASC,YAAT,CAAsBC,CAAtB,EAAyB;AACrB,wBACI,QAAC,MAAD;AACI,MAAA,GAAG,EAAIF,KAAK,CAACG,OAAN,CAAcD,CAAd,CADX;AAEI,MAAA,OAAO,EAAI,MAAMF,KAAK,CAACI,OAAN,CAAcF,CAAd;AAFrB;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AAED,sBACA;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,iBACKD,YAAY,CAAC,CAAD,CADjB,EAEKA,YAAY,CAAC,CAAD,CAFjB,EAGKA,YAAY,CAAC,CAAD,CAHjB;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAMI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,iBACKA,YAAY,CAAC,CAAD,CADjB,EAEKA,YAAY,CAAC,CAAD,CAFjB,EAGKA,YAAY,CAAC,CAAD,CAHjB;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,eAWI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,iBACKA,YAAY,CAAC,CAAD,CADjB,EAEKA,YAAY,CAAC,CAAD,CAFjB,EAGKA,YAAY,CAAC,CAAD,CAHjB;AAAA;AAAA;AAAA;AAAA;AAAA,YAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAmBH;;KArEQF,K;AAuET,eAAeA,KAAf","sourcesContent":["import React, { useState } from 'react';\nimport Square from './Square';\n\nfunction Board(props) {\n    /*const [squares, setSquares] = useState(Array(9).fill(null));\n    const [xNext, setXNext] = useState(true);\n    const winner = calculateWinner(squares);\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (xNext ? 'X' : 'O');\n    }\n\n    function handleClick(i) {\n        const newSquares = squares.slice();\n        if (calculateWinner(newSquares) || newSquares[i]) {\n            return;\n        }\n        newSquares[i] = xNext ? 'X' : 'O';\n        setSquares(newSquares);\n        setXNext(!xNext);\n    }\n\n    function calculateWinner(squares) {\n        const lines = [\n          [0, 1, 2],\n          [3, 4, 5],\n          [6, 7, 8],\n          [0, 3, 6],\n          [1, 4, 7],\n          [2, 5, 8],\n          [0, 4, 8],\n          [2, 4, 6],\n        ];\n        for (let i = 0; i < lines.length; i++) {\n          const [a, b, c] = lines[i];\n          if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n          }\n        }\n        return null;\n    }\n    */\n    function renderSquare(i) {\n        return (\n            <Square \n                num = {props.squares[i]}\n                onClick = {() => props.onClick(i)}\n            />\n        );\n    }\n\n    return (\n    <div>\n        <div className=\"board-row\">\n            {renderSquare(0)}\n            {renderSquare(1)}\n            {renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n            {renderSquare(3)}\n            {renderSquare(4)}\n            {renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n            {renderSquare(6)}\n            {renderSquare(7)}\n            {renderSquare(8)}\n        </div>\n    </div>\n  );\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}